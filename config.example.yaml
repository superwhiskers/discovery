options:

  # do we use https? 
  # (only disable when discovery is behind a reverse proxy that adds https)
  https: true

  # port to use for the server
  port: 5432

  # endpoint to send the discovery xml at
  endpoint: "/miiverse/xml"

  # increase this number to increase cpu-intensivity of the hashing function
  # and therefore, making the hashed servicetokens harder to crack
  hashCost: 8

  # set this to true to always use the discovery endpoint
  # specified below in the endpoints section instead of automatically
  # detecting where it is located
  overrideDiscovery: false

  # this can either be what it is now, which is a boolean,
  # or it can be a url that directs to an endpoint which returns
  # a response like this:
  # 
  # { "inMaintenance": false }
  # 
  # (in json)
  # 
  maintenance: false

  # this can be either be what is is now, which is
  # a map of hashed servicetokens encoded in hexadecimal to a map
  # with a reason, or a url to an endpoint on a server that returns a response like this:
  #
  # { "one-servicetoken": { "reason": "haha-yes" }, "two-servicetoken": { "reason": "haha-yes" } }
  # 
  # (with the hexadecimal hashed tokens grabbed from the log) (in json)
  # 
  bans:

    token-goes-here:
      reason: "haha-yes"

  # cache settings
  # (these are only used if you have either the banlist or maintenance status update from a url)
  cache:

    # timeout (in seconds) for how long to wait before updating the maintenance status
    maintenanceTimeout: 1

    # timeout (in seconds) for how long to wait before updating the banlist
    banlistTimeout: 1

# groups of sets of endpoints that certain servicetokens point to
endpoints:

  # this group must always be here
  default:
    discovery: "discovery.your-host.xyz"
    api: "api.your-host.xyz"
    wiiu: "wiiu.your-host.xyz"
    3ds: "3ds.your-host.xyz"

  # an optional group
  group-name:
    discovery: "discovery.your-host.xyz"
    api: "api.your-host.xyz"
    wiiu: "wiiu.your-host.xyz"
    3ds: "3ds.your-host.xyz"

# contains servicetokens and the group they match to.
# all hex-formatted and hashed servicetokens go to the
# default group unless otherwise specified
groupdefs:

  # a servicetoken group definition. any client with servicetoken-one uses the endpoints in group-name
  servicetoken-one: "group-name"
